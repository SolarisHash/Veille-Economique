import os
import openai
import json
import time
from typing import Dict, List, Optional, Tuple
from datetime import datetime
import re
from dataclasses import dataclass
from pathlib import Path

@dataclass
class ValidationResult:
    """R√©sultat de validation IA"""
    is_relevant: bool
    confidence_score: float
    explanation: str
    extracted_info: Dict
    themes_detected: List[str]
    
class AIValidationModule:
    """Module de validation IA avec GPT-4o-mini"""
    
    def __init__(self, env_file_path: str = ".env"):
        """Initialisation avec cl√© API depuis fichier .env"""
        self.load_api_config(env_file_path)
        
        # Configuration du client selon le type d'API
        if self.is_azure:
            self.client = openai.AzureOpenAI(
                api_key=self.api_key,
                api_version=self.api_version,
                azure_endpoint=self.azure_endpoint
            )
            print(f"‚úÖ Module IA initialis√© avec Azure OpenAI ({self.model})")
        else:
            self.client = openai.OpenAI(api_key=self.api_key)
            print(f"‚úÖ Module IA initialis√© avec OpenAI standard ({self.model})")
        
        # Configuration
        self.max_tokens = 800
        self.temperature = 0.1  # Faible pour plus de consistance
        
        # Compteurs pour monitoring des co√ªts
        self.api_calls_count = 0
        self.tokens_used = 0
    
    def load_api_config(self, env_file_path: str):
        """Chargement de la configuration API depuis le fichier .env"""
        try:
            from dotenv import load_dotenv
            load_dotenv(env_file_path)
            
            # D√©tection automatique du type d'API
            azure_api_key = os.getenv('AZURE_OPENAI_API_KEY')
            openai_api_key = os.getenv('OPENAI_API_KEY')
            
            if azure_api_key:
                # Configuration Azure OpenAI
                self.is_azure = True
                self.api_key = azure_api_key
                self.azure_endpoint = os.getenv('AZURE_OPENAI_ENDPOINT', 'https://your-resource.openai.azure.com/')
                self.api_version = os.getenv('AZURE_OPENAI_API_VERSION', '2024-02-15-preview')
                self.model = os.getenv('AZURE_OPENAI_DEPLOYMENT_NAME', 'gpt-4o-mini')
                
                print(f"üîë Configuration Azure OpenAI d√©tect√©e")
                print(f"   üìç Endpoint: {self.azure_endpoint}")
                print(f"   üéØ Deployment: {self.model}")
                
                # V√©rification des param√®tres Azure requis
                if not self.azure_endpoint or 'your-resource' in self.azure_endpoint:
                    raise ValueError("AZURE_OPENAI_ENDPOINT manquant ou invalide dans .env")
                    
            elif openai_api_key:
                # Configuration OpenAI standard
                self.is_azure = False
                self.api_key = openai_api_key
                self.model = os.getenv('AI_MODEL', 'gpt-4o-mini')
                print(f"üîë Configuration OpenAI standard d√©tect√©e")
                
            else:
                raise ValueError("Aucune cl√© API trouv√©e. Ajoutez AZURE_OPENAI_API_KEY ou OPENAI_API_KEY dans .env")
            
        except ImportError:
            print("‚ùå Installation requise: pip install python-dotenv")
            raise
        except Exception as e:
            print(f"‚ùå Erreur chargement configuration API: {e}")
            raise
    
    def validate_search_result(self, entreprise: Dict, search_result: Dict, theme: str) -> ValidationResult:
        """
        Validation IA d'un r√©sultat de recherche pour une entreprise et th√©matique donn√©es
        
        Args:
            entreprise: Donn√©es de l'entreprise (nom, commune, secteur)
            search_result: R√©sultat de recherche (titre, description, url)
            theme: Th√©matique recherch√©e (recrutements, evenements, etc.)
        
        Returns:
            ValidationResult: R√©sultat d√©taill√© de la validation
        """
        
        # Pr√©paration du prompt optimis√©
        prompt = self._build_validation_prompt(entreprise, search_result, theme)
        
        try:
            # Appel API GPT-4o-mini
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": self._get_validation_system_prompt()
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                max_tokens=self.max_tokens,
                temperature=self.temperature,
                response_format={"type": "json_object"}
            )
            
            # Parsing de la r√©ponse
            result_json = json.loads(response.choices[0].message.content)
            
            # Mise √† jour des compteurs
            self.api_calls_count += 1
            self.tokens_used += response.usage.total_tokens
            
            # Construction du r√©sultat
            return ValidationResult(
                is_relevant=result_json.get('is_relevant', False),
                confidence_score=result_json.get('confidence_score', 0.0),
                explanation=result_json.get('explanation', ''),
                extracted_info=result_json.get('extracted_info', {}),
                themes_detected=result_json.get('themes_detected', [])
            )
            
        except Exception as e:
            print(f"‚ùå Erreur validation IA: {e}")
            # Fallback : validation conservatrice
            return ValidationResult(
                is_relevant=False,
                confidence_score=0.0,
                explanation=f"Erreur IA: {str(e)}",
                extracted_info={},
                themes_detected=[]
            )
    
    def _get_validation_system_prompt(self) -> str:
        """Prompt syst√®me optimis√© pour la validation de veille √©conomique"""
        return """Tu es un expert en veille √©conomique territoriale fran√ßaise. 

Ta mission : analyser si un r√©sultat de recherche web est VRAIMENT pertinent pour une entreprise et une th√©matique donn√©es.

ATTENTION aux faux positifs courants :
- Sites de d√©finitions/dictionnaires mentionnant juste le nom
- Forums linguistiques (wordreference, etc.)
- R√©sultats g√©n√©riques sans lien r√©el avec l'entreprise
- Articles parlant d'autres entreprises avec nom similaire

CRIT√àRES DE VALIDATION STRICTE :
1. Le contenu doit VRAIMENT parler de l'entreprise sp√©cifique
2. L'information doit √™tre en rapport avec la th√©matique demand√©e
3. Le contexte doit √™tre professionnel/√©conomique
4. La source doit √™tre fiable

TH√âMATIQUES ACCEPT√âES :
- recrutements : offres emploi, embauches, CDI/CDD
- evenements : portes ouvertes, salons, conf√©rences
- innovations : nouveaux produits/services, R&D, brevets
- vie_entreprise : d√©veloppement, partenariats, implantations
- exportations : commerce international, march√©s √©trangers
- aides_subventions : financements publics, subventions
- fondation_sponsor : m√©c√©nat, actions sociales

R√©ponds TOUJOURS en JSON valide avec cette structure :
{
  "is_relevant": boolean,
  "confidence_score": float (0.0 √† 1.0),
  "explanation": "Explication d√©taill√©e de ta d√©cision",
  "extracted_info": {
    "key_facts": ["fait1", "fait2"],
    "date_mentioned": "date si trouv√©e",
    "location_mentioned": "lieu si mentionn√©"
  },
  "themes_detected": ["th√©matique1", "th√©matique2"]
}"""

    def _build_validation_prompt(self, entreprise: Dict, search_result, theme: str) -> str:
        """Construction du prompt de validation sp√©cifique"""
        
        nom_entreprise = entreprise.get('nom', '')
        commune = entreprise.get('commune', '')
        secteur = entreprise.get('secteur_naf', '')
        
        # Gestion robuste du format search_result
        if isinstance(search_result, dict):
            # Format dict standard
            titre = search_result.get('titre', '')
            description = search_result.get('description', '')
            url = search_result.get('url', '')
        elif isinstance(search_result, str):
            # Format string - traiter comme titre
            titre = search_result
            description = ""
            url = ""
        else:
            # Format inattendu - conversion s√©curis√©e
            titre = str(search_result)
            description = ""
            url = ""
        
        return f"""ANALYSE DE PERTINENCE REQUISE

ENTREPRISE √Ä ANALYSER :
- Nom : "{nom_entreprise}"
- Commune : {commune}
- Secteur : {secteur}

TH√âMATIQUE RECHERCH√âE : {theme}

R√âSULTAT DE RECHERCHE √Ä VALIDER :
- Titre : {titre}
- Description : {description}
- URL : {url}

QUESTION : Ce r√©sultat de recherche parle-t-il VRAIMENT de l'entreprise "{nom_entreprise}" concernant la th√©matique "{theme}" ?

Sois tr√®s strict sur la pertinence. Un simple mention du nom sans contexte entrepreneurial pertinent = NON PERTINENT.

Analyse et r√©ponds en JSON."""

    def batch_validate_results(self, entreprise: Dict, results_by_theme: Dict) -> Dict[str, List[Dict]]:
        """
        Validation par lot avec correction automatique de qualit√©
        
        Args:
            entreprise: Donn√©es de l'entreprise
            results_by_theme: Dict {th√©matique: donn√©es_thematique}
        
        Returns:
            Dict avec r√©sultats valid√©s et enrichis
        """
        
        print(f"ü§ñ Validation IA avec correction qualit√© pour {entreprise.get('nom', 'N/A')}")
        
        # üîß √âTAPE 1: Correction automatique de la qualit√© des donn√©es
        try:
            from data_quality_fixer import DataQualityFixer
            quality_fixer = DataQualityFixer()
            results_corriges = quality_fixer.corriger_donnees_thematiques(entreprise, results_by_theme)
            print(f"   ‚úÖ Correction qualit√© appliqu√©e")
        except ImportError:
            print(f"   ‚ö†Ô∏è DataQualityFixer non disponible - utilisation donn√©es brutes")
            results_corriges = results_by_theme
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erreur correction qualit√©: {e} - utilisation donn√©es brutes")
            results_corriges = results_by_theme
        
        # ü§ñ √âTAPE 2: Validation IA sur donn√©es corrig√©es
        validated_results = {}
        total_results = 0
        current_result = 0
        
        # Comptage total et pr√©paration des r√©sultats
        for theme, donnees_thematique in results_corriges.items():
            if isinstance(donnees_thematique, dict):
                extraits = donnees_thematique.get('extraits_textuels', [])
                if isinstance(extraits, list):
                    total_results += len(extraits)
        
        print(f"   üìä {total_results} extraits de qualit√© √† valider par l'IA")
        
        for theme, donnees_thematique in results_corriges.items():
            validated_results[theme] = []
            
            if isinstance(donnees_thematique, dict):
                extraits = donnees_thematique.get('extraits_textuels', [])
                qualite_globale = donnees_thematique.get('qualite_score', 'INCONNUE')
                
                print(f"   üéØ {theme} - Qualit√©: {qualite_globale}")
                
                if isinstance(extraits, list):
                    for extrait in extraits:
                        current_result += 1
                        print(f"     üîç Validation {current_result}/{total_results}")
                        
                        # Les extraits sont maintenant garantis d'√™tre au format dict
                        if isinstance(extrait, dict):
                            result_for_ai = extrait
                        else:
                            # Fallback au cas o√π
                            result_for_ai = {
                                'titre': str(extrait),
                                'description': '',
                                'url': ''
                            }
                        
                        # ü§ñ Validation IA avec seuil adaptatif selon la qualit√©
                        try:
                            validation = self.validate_search_result(entreprise, result_for_ai, theme)
                            
                            # Seuil adaptatif selon la qualit√© des donn√©es
                            qualite_score = extrait.get('qualite_score', 0) if isinstance(extrait, dict) else 0
                            seuil_adaptatif = 0.3 if qualite_score > 0.5 else 0.5
                            
                            # Validation avec seuil adaptatif
                            if validation.is_relevant or validation.confidence_score > seuil_adaptatif:
                                enriched_result = result_for_ai.copy()
                                enriched_result.update({
                                    'ai_validated': True,
                                    'ai_confidence': validation.confidence_score,
                                    'ai_explanation': validation.explanation,
                                    'ai_extracted_info': validation.extracted_info,
                                    'ai_themes': validation.themes_detected,
                                    'validation_timestamp': datetime.now().isoformat(),
                                    'qualite_pre_ia': qualite_score,
                                    'seuil_utilise': seuil_adaptatif
                                })
                                validated_results[theme].append(enriched_result)
                                print(f"       ‚úÖ Valid√© (confiance: {validation.confidence_score:.2f}, seuil: {seuil_adaptatif})")
                            else:
                                print(f"       ‚ùå Rejet√©: {validation.explanation[:50]}...")
                                
                        except Exception as e:
                            print(f"       ‚ö†Ô∏è Erreur validation IA: {e}")
                            # En cas d'erreur IA, garder les extraits de bonne qualit√©
                            if isinstance(extrait, dict) and extrait.get('qualite_score', 0) > 0.6:
                                print(f"       üîÑ Fallback: Gard√© car bonne qualit√©")
                                extrait['ai_validated'] = False
                                extrait['ai_fallback'] = True
                                validated_results[theme].append(extrait)
                        
                        # D√©lai pour √©viter les rate limits
                        time.sleep(0.1)  # R√©duit pour plus de rapidit√©
        
        # üìä Statistiques finales
        total_validated = sum(len(results) for results in validated_results.values())
        rejection_rate = (1 - total_validated / max(total_results, 1)) * 100
        
        print(f"   üìä R√©sultats finaux: {total_validated}/{total_results} valid√©s ({rejection_rate:.1f}% rejet√©s)")
        
        # üîÑ Mode fallback si trop peu de r√©sultats valid√©s
        if total_validated == 0 and total_results > 0:
            print(f"   üîÑ FALLBACK: IA trop stricte, r√©cup√©ration des meilleurs extraits")
            
            # R√©cup√©ration des extraits de meilleure qualit√© sans validation IA
            for theme, donnees_thematique in results_corriges.items():
                if isinstance(donnees_thematique, dict):
                    extraits = donnees_thematique.get('extraits_textuels', [])
                    # R√©cup√©ration des extraits avec qualit√©_score > 0.4
                    extraits_qualite = [
                        e for e in extraits 
                        if isinstance(e, dict) and e.get('qualite_score', 0) > 0.4
                    ]
                    
                    if extraits_qualite:
                        for extrait in extraits_qualite[:2]:  # Top 2 par th√©matique
                            extrait.update({
                                'ai_validated': False,
                                'ai_fallback_quality': True,
                                'fallback_reason': 'IA trop stricte - r√©cup√©ration par qualit√©',
                                'qualite_score': extrait.get('qualite_score', 0)
                            })
                            validated_results[theme].append(extrait)
                        
                        print(f"     üîÑ {theme}: {len(extraits_qualite[:2])} extraits r√©cup√©r√©s par qualit√©")
            
            # Nouveau d√©compte apr√®s fallback
            total_validated = sum(len(results) for results in validated_results.values())
            print(f"   üìä Apr√®s fallback: {total_validated} extraits r√©cup√©r√©s")
        
        return validated_results
    
    def generate_smart_summary(self, entreprise: Dict, validated_results: Dict[str, List[Dict]]) -> Dict:
        """
        G√©n√©ration d'un r√©sum√© intelligent de l'activit√© de l'entreprise
        
        Args:
            entreprise: Donn√©es de l'entreprise
            validated_results: R√©sultats valid√©s par th√©matique
        
        Returns:
            Dict avec r√©sum√© intelligent et insights
        """
        
        # Pr√©paration des donn√©es pour le r√©sum√©
        all_validated_info = []
        for theme, results in validated_results.items():
            for result in results:
                all_validated_info.append({
                    'theme': theme,
                    'title': result.get('titre', ''),
                    'description': result.get('description', ''),
                    'ai_info': result.get('ai_extracted_info', {}),
                    'confidence': result.get('ai_confidence', 0)
                })
        
        if not all_validated_info:
            return {
                'summary': f"Aucune activit√© significative d√©tect√©e pour {entreprise.get('nom', 'cette entreprise')}",
                'key_activities': [],
                'activity_level': 'Tr√®s faible',
                'recommendations': ['Surveillance p√©riodique recommand√©e']
            }
        
        # Prompt pour le r√©sum√© intelligent
        summary_prompt = self._build_summary_prompt(entreprise, all_validated_info)
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": self._get_summary_system_prompt()
                    },
                    {
                        "role": "user",
                        "content": summary_prompt
                    }
                ],
                max_tokens=600,
                temperature=0.2,
                response_format={"type": "json_object"}
            )
            
            self.api_calls_count += 1
            self.tokens_used += response.usage.total_tokens
            
            return json.loads(response.choices[0].message.content)
            
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration r√©sum√©: {e}")
            return {
                'summary': f"Activit√© d√©tect√©e pour {entreprise.get('nom', 'cette entreprise')} mais erreur de synth√®se",
                'key_activities': [f"{len(all_validated_info)} informations valid√©es"],
                'activity_level': 'Mod√©r√©',
                'recommendations': ['V√©rification manuelle recommand√©e']
            }
    
    def _get_summary_system_prompt(self) -> str:
        """Prompt syst√®me pour la g√©n√©ration de r√©sum√©s"""
        return """Tu es un expert en analyse d'activit√© √©conomique d'entreprises.

Ta mission : synth√©tiser l'activit√© r√©cente d'une entreprise √† partir d'informations valid√©es.

OBJECTIFS :
1. R√©sumer clairement l'activit√© principale
2. Identifier les √©v√©nements/d√©veloppements cl√©s
3. √âvaluer le niveau d'activit√© (Faible/Mod√©r√©/√âlev√©/Tr√®s √©lev√©)
4. Proposer des recommandations de surveillance

STYLE :
- Professionnel et factuel
- Concis mais informatif
- Orient√© action pour la veille √©conomique

R√©ponds en JSON avec cette structure :
{
  "summary": "R√©sum√© de 2-3 phrases de l'activit√©",
  "key_activities": ["activit√©1", "activit√©2", "activit√©3"],
  "activity_level": "Faible|Mod√©r√©|√âlev√©|Tr√®s √©lev√©",
  "recommendations": ["recommandation1", "recommandation2"],
  "priority_themes": ["th√®me1", "th√®me2"]
}"""

    def _build_summary_prompt(self, entreprise: Dict, validated_info: List[Dict]) -> str:
        """Construction du prompt pour le r√©sum√©"""
        
        nom_entreprise = entreprise.get('nom', '')
        commune = entreprise.get('commune', '')
        secteur = entreprise.get('secteur_naf', '')
        
        # Formatage des informations valid√©es
        info_text = ""
        for info in validated_info:
            info_text += f"- [{info['theme']}] {info['title']}: {info['description'][:100]}...\n"
        
        return f"""SYNTH√àSE D'ACTIVIT√â REQUISE

ENTREPRISE :
- Nom : {nom_entreprise}
- Commune : {commune}  
- Secteur : {secteur}

INFORMATIONS VALID√âES R√âCENTES :
{info_text}

NOMBRE D'INFORMATIONS : {len(validated_info)}

Synth√©tise cette activit√© en identifiant les tendances principales et le niveau d'activit√© de cette entreprise.
Sois factuel et pr√©cis."""

    def integrate_with_existing_analyzer(self, analyseur_thematiques):
        """
        Int√©gration avec l'analyseur th√©matique existant
        
        Args:
            analyseur_thematiques: Instance de AnalyseurThematiques
        """
        
        # Sauvegarde de la m√©thode originale
        original_analyser_resultats = analyseur_thematiques.analyser_resultats
        
        def analyser_resultats_with_ai(resultats_bruts, logger=None):
            """Version am√©lior√©e avec validation IA + fallback intelligent"""
            
            print("ü§ñ Analyse th√©matique avec validation IA")
            print("-" * 50)
            
            entreprises_enrichies = []
            
            for i, resultat in enumerate(resultats_bruts, 1):
                entreprise = resultat.get('entreprise', {})
                nom_entreprise = entreprise.get('nom', f'Entreprise_{i}')
                
                print(f"  üè¢ {i}/{len(resultats_bruts)}: {nom_entreprise}")
                
                donnees_thematiques = resultat.get('donnees_thematiques', {})
                
                if donnees_thematiques:
                    # ü§ñ TENTATIVE VALIDATION IA
                    try:
                        validated_results = self.batch_validate_results(entreprise, donnees_thematiques)
                        
                        # V√©rification si l'IA a trouv√© quelque chose
                        total_ai_results = sum(len(results) for results in validated_results.values())
                        
                        if total_ai_results > 0:
                            print(f"    ‚úÖ IA: {total_ai_results} r√©sultats valid√©s")
                            # Utiliser les r√©sultats IA
                            resultat_avec_validation = resultat.copy()
                            resultat_avec_validation['donnees_thematiques'] = validated_results
                            
                            entreprise_analysee = analyseur_thematiques._analyser_entreprise(resultat_avec_validation)
                            
                            # G√©n√©ration du r√©sum√© intelligent IA
                            smart_summary = self.generate_smart_summary(entreprise, validated_results)
                            
                        else:
                            print(f"    ‚ö†Ô∏è IA: Aucun r√©sultat valid√© - FALLBACK vers analyse classique")
                            # üîÑ FALLBACK: Analyse classique si IA trop stricte
                            entreprise_analysee = analyseur_thematiques._analyser_entreprise(resultat)
                            smart_summary = {'summary': f'Analyse classique appliqu√©e (IA trop stricte) - {len(donnees_thematiques)} th√©matiques d√©tect√©es'}
                        
                    except Exception as e:
                        print(f"    ‚ùå Erreur IA: {e} - FALLBACK vers analyse classique")
                        # FALLBACK en cas d'erreur IA
                        entreprise_analysee = analyseur_thematiques._analyser_entreprise(resultat)
                        smart_summary = {'summary': f'Analyse classique (erreur IA): {str(e)[:100]}'}
                    
                    # Enrichissement avec l'IA (si disponible)
                    entreprise_analysee.update({
                        'ai_summary': smart_summary,
                        'ai_validation_applied': True,
                        'ai_stats': {
                            'api_calls': self.api_calls_count,
                            'tokens_used': self.tokens_used
                        }
                    })
                    
                    score_final = entreprise_analysee.get('score_global', 0)
                    print(f"    üéØ Score final: {score_final:.3f}")
                    
                    if score_final > 0:
                        print(f"    üìù R√©sum√©: {smart_summary.get('summary', '')[:60]}...")
                    else:
                        print(f"    ‚ö†Ô∏è Aucune activit√© d√©tect√©e")
                    
                else:
                    # Pas de donn√©es th√©matiques
                    entreprise_analysee = analyseur_thematiques._analyser_entreprise(resultat)
                    entreprise_analysee.update({
                        'ai_summary': {'summary': 'Aucune donn√©e th√©matique trouv√©e'},
                        'ai_validation_applied': False
                    })
                
                entreprises_enrichies.append(entreprise_analysee)
            
            # Statistiques finales
            entreprises_avec_activite = [e for e in entreprises_enrichies if e.get('score_global', 0) > 0]
            
            print(f"\nüìä Statistiques IA:")
            print(f"   üîß Appels API: {self.api_calls_count}")
            print(f"   üìù Tokens utilis√©s: {self.tokens_used}")
            print(f"   üí∞ Co√ªt estim√©: ${(self.tokens_used * 0.00015 / 1000):.4f}")
            print(f"   üéØ Entreprises avec activit√©: {len(entreprises_avec_activite)}/{len(entreprises_enrichies)}")
            
            if len(entreprises_avec_activite) == 0:
                print(f"   ‚ö†Ô∏è WARNING: IA trop stricte - consid√©rez ajuster les param√®tres")
            
            return entreprises_enrichies
        
        # Remplacement de la m√©thode
        analyseur_thematiques.analyser_resultats = analyser_resultats_with_ai
        
        print("‚úÖ Module IA int√©gr√© √† l'analyseur th√©matique")
    
    def get_usage_stats(self) -> Dict:
        """Statistiques d'utilisation de l'API"""
        estimated_cost = (self.tokens_used * 0.00015 / 1000)  # Prix GPT-4o-mini
        
        return {
            'api_calls': self.api_calls_count,
            'tokens_used': self.tokens_used,
            'estimated_cost_usd': estimated_cost,
            'avg_tokens_per_call': self.tokens_used / max(self.api_calls_count, 1)
        }

# Fonction d'int√©gration dans le syst√®me principal
def setup_ai_validation(veille_economique):
    """
    Configuration du module IA dans le syst√®me de veille √©conomique
    
    Args:
        veille_economique: Instance de VeilleEconomique
    """
    
    try:
        # Initialisation du module IA
        ai_module = AIValidationModule()
        
        # Int√©gration avec l'analyseur existant
        # Note: ceci n√©cessite d'avoir acc√®s √† l'analyseur dans votre main.py
        # Vous pouvez adapter selon votre architecture
        
        print("ü§ñ Module IA de validation configur√©")
        print("üéØ Avantages activ√©s:")
        print("   ‚úÖ R√©duction drastique des faux positifs")
        print("   ‚úÖ Validation intelligente des r√©sultats")
        print("   ‚úÖ R√©sum√©s automatiques d'activit√©")
        print("   ‚úÖ Classification th√©matique am√©lior√©e")
        
        return ai_module
        
    except Exception as e:
        print(f"‚ùå Erreur configuration IA: {e}")
        print("üí° V√©rifiez que le fichier .env contient OPENAI_API_KEY")
        return None

if __name__ == "__main__":
    # Test du module
    print("üß™ Test du module IA de validation")
    
    try:
        ai_module = AIValidationModule()
        
        # Test avec donn√©es factices
        entreprise_test = {
            'nom': 'CARREFOUR',
            'commune': 'Boulogne-Billancourt',
            'secteur_naf': 'Commerce de d√©tail'
        }
        
        resultat_test = {
            'titre': 'CARREFOUR recrute 50 personnes en CDI √† Boulogne-Billancourt',
            'description': 'Le groupe Carrefour annonce le recrutement de 50 collaborateurs en contrat √† dur√©e ind√©termin√©e pour son magasin de Boulogne-Billancourt.',
            'url': 'https://www.carrefour.fr/recrutement'
        }
        
        validation = ai_module.validate_search_result(entreprise_test, resultat_test, 'recrutements')
        
        print(f"‚úÖ Test r√©ussi:")
        print(f"   Pertinent: {validation.is_relevant}")
        print(f"   Confiance: {validation.confidence_score}")
        print(f"   Explication: {validation.explanation}")
        
        stats = ai_module.get_usage_stats()
        print(f"\nüìä Statistiques: {stats}")
        
    except Exception as e:
        print(f"‚ùå Erreur test: {e}")