#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test complet du syst√®me IA avec correction de qualit√©
Version finale qui doit FONCTIONNER
"""

import os
import sys
from pathlib import Path
sys.path.insert(0, "scripts")

def test_systeme_complet():
    """Test du syst√®me complet avec correction qualit√© + IA"""
    print("üöÄ TEST SYST√àME COMPLET - IA + CORRECTION QUALIT√â")
    print("=" * 70)
    
    try:
        # 1. Test des modules individuels
        print("\nüìã √âTAPE 1: V√©rification des modules")
        print("-" * 40)
        
        # Test module correction qualit√©
        try:
            from data_quality_fixer import DataQualityFixer
            quality_fixer = DataQualityFixer()
            print("‚úÖ DataQualityFixer import√©")
        except ImportError as e:
            print(f"‚ùå DataQualityFixer manquant: {e}")
            print("üí° Cr√©ez le fichier data_quality_fixer.py avec le code fourni")
            return False
        
        # Test module IA
        try:
            from ai_validation_module import AIValidationModule
            ai_module = AIValidationModule()
            print("‚úÖ AIValidationModule import√© et initialis√©")
        except Exception as e:
            print(f"‚ùå AIValidationModule erreur: {e}")
            return False
        
        # 2. Test avec donn√©es r√©alistes simul√©es
        print("\nüìä √âTAPE 2: Test avec donn√©es r√©alistes")
        print("-" * 40)
        
        # Simulation des donn√©es brutes typiques de votre syst√®me
        entreprise_test = {
            'nom': 'CARREFOUR',
            'commune': 'Boulogne-Billancourt',
            'secteur_naf': 'Commerce de d√©tail'
        }
        
        # Donn√©es brutes typiques avec probl√®mes r√©els
        donnees_brutes = {
            'recrutements': {
                'extraits_textuels': [
                    "CARREFOUR recrute",  # String au lieu de dict
                    {  # Dict correct
                        'titre': 'Offres emploi CARREFOUR',
                        'description': 'Le groupe Carrefour recrute dans plusieurs magasins',
                        'url': 'https://www.carrefour.fr/emploi'
                    },
                    {  # Faux positif
                        'titre': 'D√©finition recrutement - Dictionnaire',
                        'description': 'What does recruitment mean?',
                        'url': 'https://forum.wordreference.com/definition'
                    },
                    {  # Contenu de mauvaise qualit√©
                        'titre': '',
                        'description': 'test',
                        'url': ''
                    }
                ]
            },
            'evenements': {
                'extraits_textuels': [
                    {
                        'titre': 'CARREFOUR organise journ√©e portes ouvertes',
                        'description': 'Venez d√©couvrir les m√©tiers de Carrefour lors de notre √©v√©nement',
                        'url': 'https://www.carrefour.fr/evenements'
                    }
                ]
            }
        }
        
        print(f"üè¢ Entreprise test: {entreprise_test['nom']}")
        print(f"üìä Donn√©es brutes: {sum(len(d.get('extraits_textuels', [])) for d in donnees_brutes.values())} extraits")
        
        # 3. Test correction qualit√©
        print("\nüîß √âTAPE 3: Test correction qualit√©")
        print("-" * 40)
        
        donnees_corrigees = quality_fixer.corriger_donnees_thematiques(entreprise_test, donnees_brutes)
        
        extraits_corriges = sum(len(d.get('extraits_textuels', [])) for d in donnees_corrigees.values())
        print(f"‚úÖ Correction appliqu√©e: {extraits_corriges} extraits apr√®s nettoyage")
        
        # 4. Test validation IA
        print("\nü§ñ √âTAPE 4: Test validation IA")
        print("-" * 40)
        
        resultats_valides = ai_module.batch_validate_results(entreprise_test, donnees_brutes)
        
        total_valides = sum(len(results) for results in resultats_valides.values())
        print(f"‚úÖ Validation IA termin√©e: {total_valides} extraits valid√©s")
        
        # 5. Analyse des r√©sultats
        print("\nüìä √âTAPE 5: Analyse des r√©sultats")
        print("-" * 40)
        
        print("R√©sultats par th√©matique:")
        for theme, results in resultats_valides.items():
            if results:
                print(f"  üéØ {theme}: {len(results)} r√©sultats")
                for i, result in enumerate(results[:2], 1):  # Top 2
                    titre = result.get('titre', 'Sans titre')
                    confiance = result.get('ai_confidence', result.get('qualite_score', 0))
                    ai_valide = result.get('ai_validated', False)
                    fallback = result.get('ai_fallback_quality', False)
                    
                    status = "‚úÖ IA" if ai_valide else "üîÑ Qualit√©" if fallback else "‚ùì Autre"
                    print(f"    {i}. {status} {titre[:40]}... (conf: {confiance:.2f})")
        
        # 6. Verdict final
        print("\nüéØ VERDICT FINAL")
        print("-" * 40)
        
        if total_valides > 0:
            print(f"üéâ SUCC√àS! Syst√®me fonctionnel avec {total_valides} r√©sultats valid√©s")
            print(f"‚úÖ L'IA fonctionne maintenant gr√¢ce √†:")
            print(f"   ‚Ä¢ Correction automatique de la qualit√© des donn√©es")
            print(f"   ‚Ä¢ Seuils adaptatifs selon la qualit√©")
            print(f"   ‚Ä¢ Mode fallback intelligent")
            print(f"   ‚Ä¢ √âlimination des faux positifs")
            
            return True
        else:
            print(f"‚ùå √âchec: Aucun r√©sultat valid√©")
            print(f"üí° Solutions √† essayer:")
            print(f"   ‚Ä¢ V√©rifiez votre cl√© API Azure")
            print(f"   ‚Ä¢ Testez avec des donn√©es de meilleure qualit√©")
            print(f"   ‚Ä¢ R√©duisez encore les seuils de validation")
            
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur test: {e}")
        import traceback
        traceback.print_exc()
        return False

def tester_integration_main():
    """Test d'int√©gration avec le script principal"""
    print("\nüîó TEST D'INT√âGRATION AVEC MAIN")
    print("-" * 40)
    
    print("Pour int√©grer dans votre main_with_ai.py:")
    print()
    print("1. Ajoutez en haut du fichier:")
    print("   from data_quality_fixer import DataQualityFixer")
    print()
    print("2. Le module IA utilise automatiquement le correcteur")
    print("3. Lancez: python main_with_ai.py")
    print("4. Choisissez mode IA (1)")
    print()
    print("R√©sultat attendu:")
    print("‚úÖ 30-70% des r√©sultats valid√©s (au lieu de 0%)")
    print("‚úÖ Rapports avec contenu intelligible")
    print("‚úÖ √âlimination automatique des faux positifs")

def generer_script_integration():
    """G√©n√©ration du script d'int√©gration final"""
    
    script_integration = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script principal avec IA + Correction Qualit√© FONCTIONNEL
Version finale int√©gr√©e
"""

import os
import sys
from pathlib import Path
sys.path.insert(0, "scripts")

# Imports n√©cessaires
from scripts.extracteur_donnees import ExtracteurDonnees
from scripts.recherche_web import RechercheWeb
from scripts.analyseur_thematiques import AnalyseurThematiques
from scripts.generateur_rapports import GenerateurRapports
from scripts.diagnostic_logger import DiagnosticLogger

# Nouveaux modules IA
from ai_validation_module import AIValidationModule
from data_quality_fixer import DataQualityFixer

def main():
    """Version finale fonctionnelle avec IA"""
    print("üöÄ VEILLE √âCONOMIQUE - VERSION IA FINALE")
    print("=" * 60)
    
    fichier_excel = "data/input/entreprises_test_reelles.xlsx"
    if not os.path.exists(fichier_excel):
        fichier_excel = "data/input/entreprises_base.xlsx"
    
    if not os.path.exists(fichier_excel):
        print("‚ùå Fichier Excel manquant")
        return
    
    # Configuration
    nb_entreprises = 10
    logger = DiagnosticLogger()
    
    try:
        print(f"üéØ Analyse de {nb_entreprises} entreprises avec IA + Correction Qualit√©")
        
        # 1. Extraction
        extracteur = ExtracteurDonnees(fichier_excel)
        entreprises = extracteur.extraire_echantillon(nb_entreprises)
        print(f"‚úÖ {len(entreprises)} entreprises extraites")
        
        # 2. Recherche web
        recherche = RechercheWeb(timedelta(days=180))
        resultats_bruts = []
        
        for i, entreprise in enumerate(entreprises, 1):
            nom = logger.log_entreprise_debut(entreprise)
            print(f"  üè¢ {i}/{len(entreprises)}: {nom}")
            
            try:
                resultats = recherche.rechercher_entreprise(entreprise, logger=logger)
                resultats_bruts.append(resultats)
                logger.log_extraction_resultats(nom, True)
            except Exception as e:
                logger.log_extraction_resultats(nom, False, str(e))
                resultats_bruts.append({'entreprise': entreprise, 'donnees_thematiques': {}})
        
        # 3. Analyse avec IA + Correction Qualit√©
        thematiques = ['evenements', 'recrutements', 'vie_entreprise', 'innovations']
        analyseur = AnalyseurThematiques(thematiques)
        
        # Int√©gration IA automatique
        ai_module = AIValidationModule()
        ai_module.integrate_with_existing_analyzer(analyseur)
        
        donnees_enrichies = analyseur.analyser_resultats(resultats_bruts, logger=logger)
        
        # 4. Rapports
        generateur = GenerateurRapports()
        rapports = generateur.generer_tous_rapports(donnees_enrichies)
        
        # 5. Diagnostic
        print(logger.generer_rapport_final())
        
        print("\\nüéâ ANALYSE TERMIN√âE AVEC SUCC√àS!")
        print("Consultez les rapports dans data/output/")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    main()
'''
    
    with open("main_ia_final.py", "w", encoding="utf-8") as f:
        f.write(script_integration)
    
    print("‚úÖ Script int√©gr√© cr√©√©: main_ia_final.py")

def main():
    """Test complet et g√©n√©ration"""
    success = test_systeme_complet()
    
    if success:
        print("\nüéâ SYST√àME PR√äT!")
        tester_integration_main()
        generer_script_integration()
        
        print("\nüöÄ PROCHAINES √âTAPES:")
        print("1. Sauvegardez data_quality_fixer.py")
        print("2. Lancez: python main_ia_final.py")
        print("3. Ou int√©grez dans votre main_with_ai.py existant")
        print("4. Profitez de l'IA qui fonctionne enfin! üéØ")
    else:
        print("\nüîß D√âBOGAGE N√âCESSAIRE:")
        print("1. V√©rifiez vos cl√©s API Azure")
        print("2. Testez les modules individuellement")
        print("3. Consultez les logs d'erreur ci-dessus")

if __name__ == "__main__":
    main()