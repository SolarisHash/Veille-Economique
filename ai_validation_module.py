import os
import openai
import json
import time
from typing import Dict, List, Optional, Tuple
from datetime import datetime
import re
from dataclasses import dataclass
from pathlib import Path

@dataclass
class ValidationResult:
    """R√©sultat de validation IA"""
    is_relevant: bool
    confidence_score: float
    explanation: str
    extracted_info: Dict
    themes_detected: List[str]
    
class AIValidationModule:
    """Module de validation IA avec GPT-4o-mini"""
    
    def __init__(self, env_file_path: str = ".env"):
        """Initialisation avec cl√© API depuis fichier .env"""
        self.load_api_config(env_file_path)
        
        # Configuration du client selon le type d'API
        if self.is_azure:
            self.client = openai.AzureOpenAI(
                api_key=self.api_key,
                api_version=self.api_version,
                azure_endpoint=self.azure_endpoint
            )
            print(f"‚úÖ Module IA initialis√© avec Azure OpenAI ({self.model})")
        else:
            self.client = openai.OpenAI(api_key=self.api_key)
            print(f"‚úÖ Module IA initialis√© avec OpenAI standard ({self.model})")
        
        # Configuration
        self.max_tokens = 800
        self.temperature = 0.1  # Faible pour plus de consistance
        
        # Compteurs pour monitoring des co√ªts
        self.api_calls_count = 0
        self.tokens_used = 0
    
    def load_api_config(self, env_file_path: str):
        """Chargement de la configuration API depuis le fichier .env"""
        try:
            from dotenv import load_dotenv
            load_dotenv(env_file_path)
            
            # D√©tection automatique du type d'API
            azure_api_key = os.getenv('AZURE_OPENAI_API_KEY')
            openai_api_key = os.getenv('OPENAI_API_KEY')
            
            if azure_api_key:
                # Configuration Azure OpenAI
                self.is_azure = True
                self.api_key = azure_api_key
                self.azure_endpoint = os.getenv('AZURE_OPENAI_ENDPOINT', 'https://your-resource.openai.azure.com/')
                self.api_version = os.getenv('AZURE_OPENAI_API_VERSION', '2024-02-15-preview')
                self.model = os.getenv('AZURE_OPENAI_DEPLOYMENT_NAME', 'gpt-4o-mini')
                
                print(f"üîë Configuration Azure OpenAI d√©tect√©e")
                print(f"   üìç Endpoint: {self.azure_endpoint}")
                print(f"   üéØ Deployment: {self.model}")
                
                # V√©rification des param√®tres Azure requis
                if not self.azure_endpoint or 'your-resource' in self.azure_endpoint:
                    raise ValueError("AZURE_OPENAI_ENDPOINT manquant ou invalide dans .env")
                    
            elif openai_api_key:
                # Configuration OpenAI standard
                self.is_azure = False
                self.api_key = openai_api_key
                self.model = os.getenv('AI_MODEL', 'gpt-4o-mini')
                print(f"üîë Configuration OpenAI standard d√©tect√©e")
                
            else:
                raise ValueError("Aucune cl√© API trouv√©e. Ajoutez AZURE_OPENAI_API_KEY ou OPENAI_API_KEY dans .env")
            
        except ImportError:
            print("‚ùå Installation requise: pip install python-dotenv")
            raise
        except Exception as e:
            print(f"‚ùå Erreur chargement configuration API: {e}")
            raise
    
    def _get_validation_system_prompt(self) -> str:
        """‚úÖ PROMPT √âQUILIBR√â : Ni trop strict, ni trop permissif"""
        return """Tu es un expert en veille √©conomique avec une approche √âQUILIBR√âE et PRAGMATIQUE.

    OBJECTIF: Valider les r√©sultats pertinents tout en √©vitant les faux positifs √©vidents.

    R√àGLES DE VALIDATION √âQUILIBR√âES:

    ‚úÖ VALIDER SI:
    1. Le nom de l'entreprise EST mentionn√© dans le contenu ET
    2. Le contenu a un lien logique avec la th√©matique demand√©e ET
    3. C'est dans un contexte professionnel/√©conomique

    ‚ùå REJETER SI:
    1. Contenu compl√®tement hors-sujet (dictionnaires, forums linguistiques)
    2. Th√©matique totalement diff√©rente (ex: chiffre d'affaires pour "recrutements")
    3. Mention uniquement administrative sans lien th√©matique

    ü§î CAS LIMITES - ACCEPTER AVEC SCORE MOD√âR√â:
    - Informations g√©n√©rales d'entreprise avec mention indirecte de la th√©matique
    - Articles de presse mentionnant l'entreprise dans un contexte li√©
    - Contenus partiellement pertinents mais pas parfaitement align√©s

    EXEMPLES CONCRETS:

    RECRUTEMENTS:
    ‚úÖ ACCEPTER (score √©lev√© 0.8+):
    - "CARREFOUR recrute 50 personnes"
    - "Offres d'emploi chez CARREFOUR"
    - "CARREFOUR cherche un directeur"

    ü§î ACCEPTER (score mod√©r√© 0.4-0.6):
    - "CARREFOUR d√©veloppe ses √©quipes" (implication recrutement)
    - "Croissance de CARREFOUR et nouveaux postes" (lien indirect)
    - "CARREFOUR renforce son organisation" (possible recrutement)

    ‚ùå REJETER (score <0.3):
    - "Chiffre d'affaires de CARREFOUR" (aucun lien recrutement)
    - "Adresse de CARREFOUR" (informatif seulement)

    INNOVATIONS:
    ‚úÖ ACCEPTER (score √©lev√©):
    - "CARREFOUR lance un nouveau service"
    - "Innovation chez CARREFOUR"
    - "CARREFOUR d√©veloppe une technologie"

    ü§î ACCEPTER (score mod√©r√©):
    - "CARREFOUR modernise ses magasins" (am√©lioration = innovation)
    - "Nouveaut√©s chez CARREFOUR" (possible innovation)
    - "CARREFOUR investit dans le digital" (lien technologique)

    ‚ùå REJETER:
    - "CARREFOUR recrute des d√©veloppeurs" (th√©matique = recrutements)
    - "R√©sultats financiers CARREFOUR" (pas d'innovation)

    PRINCIPE G√âN√âRAL:
    - √ätre PRAGMATIQUE : accepter les contenus raisonnablement li√©s
    - √âviter les EXTR√äMES : ni tout rejeter, ni tout accepter
    - FAIRE CONFIANCE au contexte : si √ßa peut √™tre li√©, c'est probablement valable
    - Privil√©gier les FAUX POSITIFS acceptables aux FAUX N√âGATIFS dommageables

    R√©ponds TOUJOURS en JSON valide:
    {
    "is_relevant": [true/false - true si lien raisonnable avec la th√©matique],
    "confidence_score": [0.0-1.0 - moduler selon la pertinence],
    "explanation": "Explication claire de la d√©cision",
    "extracted_info": {
        "key_facts": ["Faits pertinents extraits"],
        "relevance_level": "high/medium/low",
        "theme_connection": "Comment √ßa se rapporte √† la th√©matique"
    },
    "themes_detected": ["Th√©matiques identifi√©es"]
    }"""

    # üî• REFONTE COMPL√àTE - Remplace validate_search_result dans ai_validation_module.py

    def validate_search_result(self, entreprise: Dict, search_result: Dict, theme: str) -> ValidationResult:
        """üéØ VALIDATION INTELLIGENTE : Rejette les annuaires et faux positifs"""
        
        titre = search_result.get('titre', '').lower()
        description = search_result.get('description', '').lower()
        url = search_result.get('url', '').lower()
        
        texte_complet = f"{titre} {description} {url}"
        nom_entreprise = entreprise.get('nom', '').lower()
        
        print(f"üîç Validation: {titre[:50]}... pour th√©matique '{theme}'")
        
        # ‚úÖ √âTAPE 1: EXCLUSIONS STRICTES (Faux positifs √©vidents)
        exclusions_strictes = [
            # Sites d'annuaires/fiches entreprise
            'societe.com', 'verif.com', 'manageo.fr', 'infonet.fr', 'pagesjaunes.fr',
            'entreprises.lefigaro.fr', 'qwant.com', '118000.fr', 'kompass.com',
            
            # Contenu purement administratif
            'chiffre d\'affaires', 'bilans', 'statuts', 'sirene', 'kbis',
            'r√©sultats financiers', 'bilan comptable', 'actionnaires',
            'num√©ro tva', 'code ape', 'forme juridique', 'dirigeants',
            
            # Sites g√©n√©riques non pertinents
            'horaires d\'ouverture', 'adresse t√©l√©phone', 'coordonn√©es',
            'plan d\'acc√®s', 'itin√©raire', 'contact',
            
            # Forums/dictionnaires
            'wordreference', 'larousse', 'dictionary', 'd√©finition'
        ]
        
        for exclusion in exclusions_strictes:
            if exclusion in texte_complet:
                return ValidationResult(
                    is_relevant=False,
                    confidence_score=0.0,
                    explanation=f"‚ùå Exclusion stricte: {exclusion} d√©tect√©e",
                    extracted_info={'exclusion_reason': exclusion},
                    themes_detected=[]
                )
        
        # ‚úÖ √âTAPE 2: VALIDATION ENTREPRISE
        if not self._valider_entreprise_recherchable(entreprise):
            return ValidationResult(
                is_relevant=False,
                confidence_score=0.0,
                explanation="‚ùå Entreprise non recherchable (personne physique)",
                extracted_info={'reason': 'entreprise_non_recherchable'},
                themes_detected=[]
            )
        
        # ‚úÖ √âTAPE 3: VALIDATION TH√âMATIQUE STRICTE
        mots_cles_stricts_par_theme = {
            'recrutements': {
                'obligatoires': ['recrut', 'emploi', 'embauche', 'poste', 'cdi', 'cdd', 'stage'],
                'contexte': ['candidat', 'cv', 'entretien', 'offre', 'carri√®re', '√©quipe']
            },
            'evenements': {
                'obligatoires': ['√©v√©nement', '√©v√®nement', 'salon', 'conf√©rence', 'porte ouverte'],
                'contexte': ['rencontre', 'forum', 'manifestation', 'inauguration']
            },
            'innovations': {
                'obligatoires': ['innovation', 'nouveau produit', 'nouveau service', 'lancement'],
                'contexte': ['d√©veloppe', 'cr√©e', 'technologie', 'brevets', 'r&d']
            },
            'vie_entreprise': {
                'obligatoires': ['ouverture', 'fermeture', 'expansion', 'partenariat'],
                'contexte': ['d√©veloppement', 'projet', 'investissement', 'croissance']
            }
        }
        
        theme_config = mots_cles_stricts_par_theme.get(theme, {'obligatoires': [], 'contexte': []})
        
        # Recherche mots-cl√©s obligatoires
        mots_obligatoires_trouves = [mot for mot in theme_config['obligatoires'] if mot in texte_complet]
        mots_contexte_trouves = [mot for mot in theme_config['contexte'] if mot in texte_complet]
        
        if not mots_obligatoires_trouves and not mots_contexte_trouves:
            return ValidationResult(
                is_relevant=False,
                confidence_score=0.0,
                explanation=f"‚ùå Aucun mot-cl√© {theme} trouv√©",
                extracted_info={'theme_words_found': []},
                themes_detected=[]
            )
        
        # ‚úÖ √âTAPE 4: VALIDATION ENTREPRISE MENTIONN√âE
        mots_entreprise = [mot for mot in nom_entreprise.split() if len(mot) > 2]
        mots_entreprise_trouves = [mot for mot in mots_entreprise if mot in texte_complet]
        
        if len(mots_entreprise) > 0 and len(mots_entreprise_trouves) == 0:
            return ValidationResult(
                is_relevant=False,
                confidence_score=0.0,
                explanation="‚ùå Nom entreprise non mentionn√©",
                extracted_info={'enterprise_words_found': []},
                themes_detected=[]
            )
        
        # ‚úÖ √âTAPE 5: VALIDATION IA FINALE (seulement si tout passe)
        prompt = self._build_strict_validation_prompt(entreprise, search_result, theme)
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": self._get_strict_validation_prompt()},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=self.max_tokens,
                temperature=0.0,  # Temp√©rature 0 = plus d√©terministe
                response_format={"type": "json_object"}
            )
            
            result_json = json.loads(response.choices[0].message.content)
            
            self.api_calls_count += 1
            self.tokens_used += response.usage.total_tokens
            
            # ‚úÖ SEUIL TR√àS STRICT
            confidence_threshold = 0.05  # Score √©lev√© requis
            is_relevant = result_json.get('is_relevant', False)
            confidence_score = result_json.get('confidence_score', 0.0)
            
            if is_relevant and confidence_score >= confidence_threshold:
                print(f"‚úÖ IA valid√©: {confidence_score:.2f}")
                return ValidationResult(
                    is_relevant=True,
                    confidence_score=confidence_score,
                    explanation=f"‚úÖ Valid√© par IA: {result_json.get('explanation', '')}",
                    extracted_info=result_json.get('extracted_info', {}),
                    themes_detected=result_json.get('themes_detected', [])
                )
            else:
                print(f"‚ùå IA rejet√©: {confidence_score:.2f}")
                return ValidationResult(
                    is_relevant=False,
                    confidence_score=confidence_score,
                    explanation=f"‚ùå IA: {result_json.get('explanation', '')}",
                    extracted_info={},
                    themes_detected=[]
                )
                
        except Exception as e:
            print(f"‚ùå Erreur IA: {e}")
            # En cas d'erreur IA, validation basique stricte
            return self._validation_basique_stricte(
                mots_obligatoires_trouves, mots_contexte_trouves, 
                mots_entreprise_trouves, theme
            )

    def _valider_entreprise_recherchable(self, entreprise: Dict) -> bool:
        """Validation si l'entreprise est recherchable"""
        nom = entreprise.get('nom', '').upper()
        
        # Exclusions √©videntes
        exclusions = [
            'MADAME', 'MONSIEUR', 'MADEMOISELLE', 'M.', 'MME', 'MLLE',
            'INDIVISION', 'INFORMATION NON-DIFFUSIBLE'
        ]
        
        for exclusion in exclusions:
            if nom.startswith(exclusion):
                print(f"‚ùå Entreprise non recherchable: {exclusion}")
                return False
        
        # Doit avoir au moins 2 mots significatifs
        mots_significatifs = [mot for mot in nom.split() if len(mot) > 2]
        if len(mots_significatifs) < 2:
            print(f"‚ùå Nom trop simple: {nom}")
            return False
        
        return True

    def _get_strict_validation_prompt(self) -> str:
        """Prompt IA TR√àS STRICT"""
        return """Tu es un expert en veille √©conomique avec une approche TR√àS STRICTE.

    MISSION: √âliminer TOUS les faux positifs, m√™me au risque de manquer des vrais r√©sultats.

    R√àGLES STRICTES:
    1. REJETER IMM√âDIATEMENT si:
    - C'est une fiche d'annuaire (Societe.com, Verif.com, etc.)
    - C'est du contenu administratif (bilans, chiffre d'affaires, statuts)
    - C'est juste une adresse/coordonn√©es/horaires
    - Aucun contenu r√©el sur la th√©matique demand√©e

    2. ACCEPTER UNIQUEMENT si:
    - Article de presse parlant sp√©cifiquement de l'entreprise ET de la th√©matique
    - Communiqu√© de l'entreprise sur la th√©matique
    - Information business r√©elle et r√©cente

    3. SCORES:
    - 0.9+ : Article de presse sp√©cialis√©e avec info pr√©cise
    - 0.7-0.8 : Information business r√©elle mais g√©n√©rale
    - 0.5-0.6 : Mention pertinente mais limit√©e
    - <0.5 : REJETER

    EN CAS DE DOUTE ‚Üí REJETER

    R√©ponds en JSON:
    {
    "is_relevant": false (par d√©faut),
    "confidence_score": 0.0,
    "explanation": "Raison d√©taill√©e du rejet/acceptation",
    "content_type": "fiche_annuaire|article_presse|communique|autre",
    "extracted_info": {"key_facts": []}
    }"""

    def _validation_basique_stricte(self, mots_obligatoires: List, mots_contexte: List, 
                                mots_entreprise: List, theme: str) -> ValidationResult:
        """Validation basique stricte en fallback"""
        
        # Score bas√© sur les mots-cl√©s trouv√©s
        score_obligatoires = len(mots_obligatoires) * 0.4
        score_contexte = len(mots_contexte) * 0.2
        score_entreprise = min(len(mots_entreprise) * 0.3, 0.3)
        
        score_total = score_obligatoires + score_contexte + score_entreprise
        
        # Seuil strict
        if score_total >= 0.6:
            return ValidationResult(
                is_relevant=True,
                confidence_score=score_total,
                explanation=f"Validation basique stricte: {score_total:.2f}",
                extracted_info={
                    'obligatory_words': mots_obligatoires,
                    'context_words': mots_contexte,
                    'enterprise_words': mots_entreprise
                },
                themes_detected=[theme]
            )
        else:
            return ValidationResult(
                is_relevant=False,
                confidence_score=score_total,
                explanation=f"Score basique insuffisant: {score_total:.2f}",
                extracted_info={},
                themes_detected=[]
            )

    def _build_strict_validation_prompt(self, entreprise: Dict, search_result: Dict, theme: str) -> str:
        """Prompt strict pour l'IA"""
        
        nom_entreprise = entreprise.get('nom', '')
        commune = entreprise.get('commune', '')
        
        titre = search_result.get('titre', '')
        description = search_result.get('description', '')
        url = search_result.get('url', '')
        
        return f"""VALIDATION STRICTE REQUISE

    ENTREPRISE: {nom_entreprise} ({commune})
    TH√âMATIQUE: {theme}

    CONTENU √Ä ANALYSER:
    Titre: {titre}
    Description: {description}
    URL: {url}

    QUESTION: Ce contenu est-il un VRAI article/information business sur {nom_entreprise} 
    concernant sp√©cifiquement la th√©matique {theme} ?

    REJETER si c'est:
    - Fiche annuaire (Societe.com, etc.)
    - Informations administratives/financi√®res g√©n√©rales
    - Simple coordonn√©es/adresse

    ACCEPTER seulement si:
    - Article de presse business r√©el
    - Communiqu√© entreprise
    - Information concr√®te sur la th√©matique

    Analyse stricte et r√©ponds en JSON."""

    # ‚úÖ D√âSACTIVATION VALIDATION TH√âMATIQUE
    def validate_theme_match(self, contenu_texte: str, thematique: str) -> bool:
        """Mode ultra-permissif: Accepte TOUT"""
        return True  # Accepte syst√©matiquement

    # ‚úÖ FALLBACK ULTRA-PERMISSIF
    def _fallback_validation(self, entreprise: Dict, result: Dict, theme: str):
        """Fallback qui accepte presque tout"""
        
        return ValidationResult(
            is_relevant=True,
            confidence_score=0.5,
            explanation="Fallback ultra-permissif: Accept√© par d√©faut",
            extracted_info={'method': 'fallback_permissif'},
            themes_detected=[theme]
        )

    def batch_validate_results(self, entreprise: Dict, results_by_theme: Dict) -> Dict[str, List[Dict]]:
        """‚úÖ VALIDATION PERMISSIVE avec fallback intelligent"""
        
        print(f"ü§ñ Validation IA PERMISSIVE pour {entreprise.get('nom', 'N/A')}")
        
        validated_results = {}
        total_results = 0
        
        # Comptage total pour statistiques
        for theme, donnees_thematique in results_by_theme.items():
            if isinstance(donnees_thematique, dict):
                extraits = donnees_thematique.get('extraits_textuels', [])
                if isinstance(extraits, list):
                    total_results += len(extraits)
        
        print(f"   üìä {total_results} extraits √† valider")
        
        for theme, donnees_thematique in results_by_theme.items():
            validated_results[theme] = []
            
            if isinstance(donnees_thematique, dict):
                extraits = donnees_thematique.get('extraits_textuels', [])
                
                if isinstance(extraits, list):
                    print(f"   üéØ {theme}: {len(extraits)} extraits")
                    
                    for i, extrait in enumerate(extraits):
                        try:
                            # Normalisation format
                            if isinstance(extrait, dict):
                                result_for_ai = extrait
                            else:
                                result_for_ai = {
                                    'titre': str(extrait),
                                    'description': '',
                                    'url': ''
                                }
                            
                            # ‚úÖ VALIDATION IA AVEC FALLBACK
                            try:
                                validation = self.validate_search_result(entreprise, result_for_ai, theme)
                                ai_success = True
                            except Exception as e:
                                print(f"     ‚ö†Ô∏è IA √©chou√©e pour extrait {i+1}: {e}")
                                # ‚úÖ FALLBACK: Validation basique sans IA
                                validation = self._fallback_validation(entreprise, result_for_ai, theme)
                                ai_success = False
                            
                            # ‚úÖ SEUIL TR√àS PERMISSIF
                            seuil_permissif = 0.3  # Seuil bas
                            
                            if validation.is_relevant or validation.confidence_score > seuil_permissif:
                                enriched_result = result_for_ai.copy()
                                enriched_result.update({
                                    'ai_validated': ai_success,
                                    'ai_confidence': validation.confidence_score,
                                    'ai_explanation': validation.explanation,
                                    'ai_extracted_info': validation.extracted_info,
                                    'ai_themes': validation.themes_detected,
                                    'validation_timestamp': datetime.now().isoformat(),
                                    'validation_method': 'ai' if ai_success else 'fallback'
                                })
                                validated_results[theme].append(enriched_result)
                                
                                method = "IA" if ai_success else "Fallback"
                                print(f"     ‚úÖ {method}: Valid√© (conf: {validation.confidence_score:.2f})")
                            else:
                                print(f"     ‚ùå Rejet√©: {validation.explanation[:50]}...")
                                
                        except Exception as e:
                            print(f"     ‚ùå Erreur validation extrait {i+1}: {e}")
                            # ‚úÖ EN CAS D'ERREUR TOTALE: Garder l'extrait quand m√™me
                            if isinstance(extrait, dict) and extrait.get('titre'):
                                extrait['ai_validated'] = False
                                extrait['ai_fallback'] = True
                                extrait['fallback_reason'] = f"Erreur IA: {str(e)[:100]}"
                                validated_results[theme].append(extrait)
                                print(f"     üîÑ Sauv√© malgr√© l'erreur")
                    
                    # ‚úÖ FALLBACK FINAL si aucun r√©sultat valid√©
                    if not validated_results[theme] and len(extraits) > 0:
                        print(f"   üîÑ FALLBACK: IA trop stricte, r√©cup√©ration des meilleurs extraits")
                        
                        # Garder au moins 1-2 extraits les plus prometteurs
                        for extrait in extraits[:2]:
                            if isinstance(extrait, dict):
                                extrait.update({
                                    'ai_validated': False,
                                    'ai_fallback_final': True,
                                    'fallback_reason': 'IA trop restrictive - r√©cup√©ration automatique',
                                    'confidence_fallback': 0.5
                                })
                                validated_results[theme].append(extrait)
                        
                        print(f"   üìã {len(validated_results[theme])} extraits r√©cup√©r√©s automatiquement")
        
        # Statistiques finales
        total_validated = sum(len(results) for results in validated_results.values())
        print(f"   üìä Validation termin√©e: {total_validated}/{total_results} extraits valid√©s")
        
        # ‚úÖ SI √âCHEC TOTAL: Mode de secours
        if total_validated == 0 and total_results > 0:
            print(f"   üö® ACTIVATION MODE SECOURS: R√©cup√©ration forc√©e")
            validated_results = self._mode_secours_validation(results_by_theme)
            total_validated = sum(len(results) for results in validated_results.values())
            print(f"   üîÑ Mode secours: {total_validated} extraits r√©cup√©r√©s")
        
        return validated_results

    def _mode_secours_validation(self, results_by_theme: Dict) -> Dict:
        """‚úÖ MODE SECOURS: R√©cup√©ration forc√©e quand l'IA √©choue totalement"""
        print("   üö® ACTIVATION MODE SECOURS")
        
        secours_results = {}
        
        for theme, donnees in results_by_theme.items():
            secours_results[theme] = []
            
            if isinstance(donnees, dict):
                extraits = donnees.get('extraits_textuels', [])
                
                # R√©cup√©rer au moins 1 extrait par th√©matique si disponible
                for extrait in extraits[:1]:  # Premier extrait seulement
                    if isinstance(extrait, dict):
                        extrait.update({
                            'ai_validated': False,
                            'mode_secours': True,
                            'secours_reason': 'IA compl√®tement d√©faillante - r√©cup√©ration forc√©e',
                            'confidence_secours': 0.3
                        })
                        secours_results[theme].append(extrait)
                        print(f"     üîÑ {theme}: 1 extrait r√©cup√©r√© en mode secours")
        
        return secours_results

    def _build_validation_prompt(self, entreprise: Dict, search_result, theme: str) -> str:
        """Construction du prompt de validation sp√©cifique"""
        
        nom_entreprise = entreprise.get('nom', '')
        commune = entreprise.get('commune', '')
        secteur = entreprise.get('secteur_naf', '')
        
        # Gestion robuste du format search_result
        if isinstance(search_result, dict):
            # Format dict standard
            titre = search_result.get('titre', '')
            description = search_result.get('description', '')
            url = search_result.get('url', '')
        elif isinstance(search_result, str):
            # Format string - traiter comme titre
            titre = search_result
            description = ""
            url = ""
        else:
            # Format inattendu - conversion s√©curis√©e
            titre = str(search_result)
            description = ""
            url = ""
        
        return f"""ANALYSE DE PERTINENCE REQUISE

ENTREPRISE √Ä ANALYSER :
- Nom : "{nom_entreprise}"
- Commune : {commune}
- Secteur : {secteur}

TH√âMATIQUE RECHERCH√âE : {theme}

R√âSULTAT DE RECHERCHE √Ä VALIDER :
- Titre : {titre}
- Description : {description}
- URL : {url}

QUESTION : Ce r√©sultat de recherche parle-t-il VRAIMENT de l'entreprise "{nom_entreprise}" concernant la th√©matique "{theme}" ?

Sois tr√®s strict sur la pertinence. Un simple mention du nom sans contexte entrepreneurial pertinent = NON PERTINENT.

Analyse et r√©ponds en JSON."""
    
    def generate_smart_summary(self, entreprise: Dict, validated_results: Dict[str, List[Dict]]) -> Dict:
        """
        G√©n√©ration d'un r√©sum√© intelligent de l'activit√© de l'entreprise
        
        Args:
            entreprise: Donn√©es de l'entreprise
            validated_results: R√©sultats valid√©s par th√©matique
        
        Returns:
            Dict avec r√©sum√© intelligent et insights
        """
        
        # Pr√©paration des donn√©es pour le r√©sum√©
        all_validated_info = []
        for theme, results in validated_results.items():
            for result in results:
                all_validated_info.append({
                    'theme': theme,
                    'title': result.get('titre', ''),
                    'description': result.get('description', ''),
                    'ai_info': result.get('ai_extracted_info', {}),
                    'confidence': result.get('ai_confidence', 0)
                })
        
        if not all_validated_info:
            return {
                'summary': f"Aucune activit√© significative d√©tect√©e pour {entreprise.get('nom', 'cette entreprise')}",
                'key_activities': [],
                'activity_level': 'Tr√®s faible',
                'recommendations': ['Surveillance p√©riodique recommand√©e']
            }
        
        # Prompt pour le r√©sum√© intelligent
        summary_prompt = self._build_summary_prompt(entreprise, all_validated_info)
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": self._get_summary_system_prompt()
                    },
                    {
                        "role": "user",
                        "content": summary_prompt
                    }
                ],
                max_tokens=600,
                temperature=0.2,
                response_format={"type": "json_object"}
            )
            
            self.api_calls_count += 1
            self.tokens_used += response.usage.total_tokens
            
            return json.loads(response.choices[0].message.content)
            
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration r√©sum√©: {e}")
            return {
                'summary': f"Activit√© d√©tect√©e pour {entreprise.get('nom', 'cette entreprise')} mais erreur de synth√®se",
                'key_activities': [f"{len(all_validated_info)} informations valid√©es"],
                'activity_level': 'Mod√©r√©',
                'recommendations': ['V√©rification manuelle recommand√©e']
            }
    
    def _get_summary_system_prompt(self) -> str:
        """Prompt syst√®me pour la g√©n√©ration de r√©sum√©s"""
        return """Tu es un expert en analyse d'activit√© √©conomique d'entreprises.

Ta mission : synth√©tiser l'activit√© r√©cente d'une entreprise √† partir d'informations valid√©es.

OBJECTIFS :
1. R√©sumer clairement l'activit√© principale
2. Identifier les √©v√©nements/d√©veloppements cl√©s
3. √âvaluer le niveau d'activit√© (Faible/Mod√©r√©/√âlev√©/Tr√®s √©lev√©)
4. Proposer des recommandations de surveillance

STYLE :
- Professionnel et factuel
- Concis mais informatif
- Orient√© action pour la veille √©conomique

R√©ponds en JSON avec cette structure :
{
  "summary": "R√©sum√© de 2-3 phrases de l'activit√©",
  "key_activities": ["activit√©1", "activit√©2", "activit√©3"],
  "activity_level": "Faible|Mod√©r√©|√âlev√©|Tr√®s √©lev√©",
  "recommendations": ["recommandation1", "recommandation2"],
  "priority_themes": ["th√®me1", "th√®me2"]
}"""

    def _build_summary_prompt(self, entreprise: Dict, validated_info: List[Dict]) -> str:
        """Construction du prompt pour le r√©sum√©"""
        
        nom_entreprise = entreprise.get('nom', '')
        commune = entreprise.get('commune', '')
        secteur = entreprise.get('secteur_naf', '')
        
        # Formatage des informations valid√©es
        info_text = ""
        for info in validated_info:
            info_text += f"- [{info['theme']}] {info['title']}: {info['description'][:100]}...\n"
        
        return f"""SYNTH√àSE D'ACTIVIT√â REQUISE

ENTREPRISE :
- Nom : {nom_entreprise}
- Commune : {commune}  
- Secteur : {secteur}

INFORMATIONS VALID√âES R√âCENTES :
{info_text}

NOMBRE D'INFORMATIONS : {len(validated_info)}

Synth√©tise cette activit√© en identifiant les tendances principales et le niveau d'activit√© de cette entreprise.
Sois factuel et pr√©cis."""

    def integrate_with_existing_analyzer(self, analyseur_thematiques):
        """
        Int√©gration avec l'analyseur th√©matique existant
        
        Args:
            analyseur_thematiques: Instance de AnalyseurThematiques
        """
        
        # Sauvegarde de la m√©thode originale
        original_analyser_resultats = analyseur_thematiques.analyser_resultats
        
        def analyser_resultats_with_ai(resultats_bruts, logger=None):
            """Version am√©lior√©e avec validation IA + fallback intelligent"""
            
            print("ü§ñ Analyse th√©matique avec validation IA")
            print("-" * 50)
            
            entreprises_enrichies = []
            
            for i, resultat in enumerate(resultats_bruts, 1):
                entreprise = resultat.get('entreprise', {})
                nom_entreprise = entreprise.get('nom', f'Entreprise_{i}')
                
                print(f"  üè¢ {i}/{len(resultats_bruts)}: {nom_entreprise}")
                
                donnees_thematiques = resultat.get('donnees_thematiques', {})
                
                if donnees_thematiques:
                    # ü§ñ TENTATIVE VALIDATION IA
                    try:
                        validated_results = self.batch_validate_results(entreprise, donnees_thematiques)
                        
                        # V√©rification si l'IA a trouv√© quelque chose
                        total_ai_results = sum(len(results) for results in validated_results.values())
                        
                        if total_ai_results > 0:
                            print(f"    ‚úÖ IA: {total_ai_results} r√©sultats valid√©s")
                            # Utiliser les r√©sultats IA
                            resultat_avec_validation = resultat.copy()
                            resultat_avec_validation['donnees_thematiques'] = validated_results
                            
                            entreprise_analysee = analyseur_thematiques._analyser_entreprise(resultat_avec_validation)
                            
                            # G√©n√©ration du r√©sum√© intelligent IA
                            smart_summary = self.generate_smart_summary(entreprise, validated_results)
                            
                        else:
                            print(f"    ‚ö†Ô∏è IA: Aucun r√©sultat valid√© - FALLBACK vers analyse classique")
                            # üîÑ FALLBACK: Analyse classique si IA trop stricte
                            entreprise_analysee = analyseur_thematiques._analyser_entreprise(resultat)
                            smart_summary = {'summary': f'Analyse classique appliqu√©e (IA trop stricte) - {len(donnees_thematiques)} th√©matiques d√©tect√©es'}
                        
                    except Exception as e:
                        print(f"    ‚ùå Erreur IA: {e} - FALLBACK vers analyse classique")
                        # FALLBACK en cas d'erreur IA
                        entreprise_analysee = analyseur_thematiques._analyser_entreprise(resultat)
                        smart_summary = {'summary': f'Analyse classique (erreur IA): {str(e)[:100]}'}
                    
                    # Enrichissement avec l'IA (si disponible)
                    entreprise_analysee.update({
                        'ai_summary': smart_summary,
                        'ai_validation_applied': True,
                        'ai_stats': {
                            'api_calls': self.api_calls_count,
                            'tokens_used': self.tokens_used
                        }
                    })
                    
                    score_final = entreprise_analysee.get('score_global', 0)
                    print(f"    üéØ Score final: {score_final:.3f}")
                    
                    if score_final > 0:
                        print(f"    üìù R√©sum√©: {smart_summary.get('summary', '')[:60]}...")
                    else:
                        print(f"    ‚ö†Ô∏è Aucune activit√© d√©tect√©e")
                    
                else:
                    # Pas de donn√©es th√©matiques
                    entreprise_analysee = analyseur_thematiques._analyser_entreprise(resultat)
                    entreprise_analysee.update({
                        'ai_summary': {'summary': 'Aucune donn√©e th√©matique trouv√©e'},
                        'ai_validation_applied': False
                    })
                
                entreprises_enrichies.append(entreprise_analysee)
            
            # Statistiques finales
            entreprises_avec_activite = [e for e in entreprises_enrichies if e.get('score_global', 0) > 0]
            
            print(f"\nüìä Statistiques IA:")
            print(f"   üîß Appels API: {self.api_calls_count}")
            print(f"   üìù Tokens utilis√©s: {self.tokens_used}")
            print(f"   üí∞ Co√ªt estim√©: ${(self.tokens_used * 0.00015 / 1000):.4f}")
            print(f"   üéØ Entreprises avec activit√©: {len(entreprises_avec_activite)}/{len(entreprises_enrichies)}")
            
            if len(entreprises_avec_activite) == 0:
                print(f"   ‚ö†Ô∏è WARNING: IA trop stricte - consid√©rez ajuster les param√®tres")
            
            return entreprises_enrichies
        
        # Remplacement de la m√©thode
        analyseur_thematiques.analyser_resultats = analyser_resultats_with_ai
        
        print("‚úÖ Module IA int√©gr√© √† l'analyseur th√©matique")
    
    def get_usage_stats(self) -> Dict:
        """Statistiques d'utilisation de l'API"""
        estimated_cost = (self.tokens_used * 0.00015 / 1000)  # Prix GPT-4o-mini
        
        return {
            'api_calls': self.api_calls_count,
            'tokens_used': self.tokens_used,
            'estimated_cost_usd': estimated_cost,
            'avg_tokens_per_call': self.tokens_used / max(self.api_calls_count, 1)
        }

# Fonction d'int√©gration dans le syst√®me principal
def setup_ai_validation(veille_economique):
    """
    Configuration du module IA dans le syst√®me de veille √©conomique
    
    Args:
        veille_economique: Instance de VeilleEconomique
    """
    
    try:
        # Initialisation du module IA
        ai_module = AIValidationModule()
        
        # Int√©gration avec l'analyseur existant
        # Note: ceci n√©cessite d'avoir acc√®s √† l'analyseur dans votre main.py
        # Vous pouvez adapter selon votre architecture
        
        print("ü§ñ Module IA de validation configur√©")
        print("üéØ Avantages activ√©s:")
        print("   ‚úÖ R√©duction drastique des faux positifs")
        print("   ‚úÖ Validation intelligente des r√©sultats")
        print("   ‚úÖ R√©sum√©s automatiques d'activit√©")
        print("   ‚úÖ Classification th√©matique am√©lior√©e")
        
        return ai_module
        
    except Exception as e:
        print(f"‚ùå Erreur configuration IA: {e}")
        print("üí° V√©rifiez que le fichier .env contient OPENAI_API_KEY")
        return None

if __name__ == "__main__":
    # Test du module
    print("üß™ Test du module IA de validation")
    
    try:
        ai_module = AIValidationModule()
        
        # Test avec donn√©es factices
        entreprise_test = {
            'nom': 'CARREFOUR',
            'commune': 'Boulogne-Billancourt',
            'secteur_naf': 'Commerce de d√©tail'
        }
        
        resultat_test = {
            'titre': 'CARREFOUR recrute 50 personnes en CDI √† Boulogne-Billancourt',
            'description': 'Le groupe Carrefour annonce le recrutement de 50 collaborateurs en contrat √† dur√©e ind√©termin√©e pour son magasin de Boulogne-Billancourt.',
            'url': 'https://www.carrefour.fr/recrutement'
        }
        
        validation = ai_module.validate_search_result(entreprise_test, resultat_test, 'recrutements')
        
        print(f"‚úÖ Test r√©ussi:")
        print(f"   Pertinent: {validation.is_relevant}")
        print(f"   Confiance: {validation.confidence_score}")
        print(f"   Explication: {validation.explanation}")
        
        stats = ai_module.get_usage_stats()
        print(f"\nüìä Statistiques: {stats}")
        
    except Exception as e:
        print(f"‚ùå Erreur test: {e}")